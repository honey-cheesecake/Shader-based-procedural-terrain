#pragma kernel CSMain

RWTexture2D<float> Result;
int width, height;

float dropOff(float x);
float noiseS(float2 g, float2 v);
float noise(float4 v);
float2 grad(uint2 u);


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float4 v = float4(id.xyxy) / float4(width,height,width,height);
	Result[id.xy] = (1.0 + noise(float4(id.xyxy) * pow(2.0, 3) / float4(width, height, width, height))) * 0.5f;
}

float dropOff(float x)
{
	float v = 1 - abs(x);
	//return 3 * v * v - 2 * v * v * v; // weird normals
	return 6 * pow(v, 5) - 15 * pow(v, 4) + 10 * pow(v, 3); // nice normals
}

uint wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

float2 grad(uint2 seed)
{
	return normalize(uint2(wang_hash(seed.x), wang_hash(seed.y)));
}

float noiseS(float2 g, float2 v)
{
	return dot(g, v.xy) * dropOff(v.x) * dropOff(v.y);
}

float noise(float4 v)
{
	uint4 gi = floor(v.xyxy) + uint4(0, 0, 1, 1);
	v = frac(v.xyxy) - float4(0.0, 0.0, 1.0, 1.0);

	return noiseS(grad(gi.xy), v.xy) + noiseS(grad(gi.zy), v.zy) + noiseS(grad(gi.xw), v.xw) + noiseS(grad(gi.zw), v.zw);
}